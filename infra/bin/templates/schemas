import { Type } from "@sinclair/typebox";

import { SWAGGER_TAGS } from "#constants";
import {
  convertHttpErrorCollectionToFastifyAjvSchemaErrorCollection as convertHttpErrorCollectionToAjvErrors,
  mixinTagForSchemas,
} from "#utils/schemas/index.js";
import { defaultHttpErrorCollection } from "#common/errors/default-http-error-collection.js";
import { COMMON_SCHEMAS_V1 } from "#v1";

// common schemas start

const {{SchemaName}}_ENTITY_SCHEMA = Type.Object({
  id: Type.String({ format: "uuid" }),
  // add fields for {{LowerCaseName}} entity here
});

const {{SchemaName}}_OUTPUT_SCHEMA = {{SchemaName}}_ENTITY_SCHEMA;

// common schemas end

const {{LowerCaseName}}Schemas = {
  getOne: {
    security: [{ bearerTokenAuth: [] }],
    params: COMMON_SCHEMAS_V1.id,
    response: {
      200: {{SchemaName}}_OUTPUT_SCHEMA,
      ...convertHttpErrorCollectionToAjvErrors(defaultHttpErrorCollection),
    },
  },
  get: {
    security: [{ bearerTokenAuth: [] }],
    querystring: COMMON_SCHEMAS_V1.paginationQuery,
    response: {
      200: COMMON_SCHEMAS_V1.pagination({{SchemaName}}_OUTPUT_SCHEMA),
      ...convertHttpErrorCollectionToAjvErrors(defaultHttpErrorCollection),
    },
  },
  create: {
    security: [{ bearerTokenAuth: [] }],
    body: Type.Object({
      // add fields for create {{LowerCaseName}} here
    }),
    response: {
      201: {{SchemaName}}_OUTPUT_SCHEMA,
      ...convertHttpErrorCollectionToAjvErrors(defaultHttpErrorCollection),
    },
  },
  update: {
    security: [{ bearerTokenAuth: [] }],
    body: Type.Object({
      // add fields for update {{LowerCaseName}} here
    }),
    response: {
      200: {{SchemaName}}_OUTPUT_SCHEMA,
      ...convertHttpErrorCollectionToAjvErrors(defaultHttpErrorCollection),
    },
  },
  delete: {
    security: [{ bearerTokenAuth: [] }],
    params: COMMON_SCHEMAS_V1.id,
    response: {
      200: COMMON_SCHEMAS_V1.status,
      ...convertHttpErrorCollectionToAjvErrors(defaultHttpErrorCollection),
    },
  },
};
//TODO add tags
export default mixinTagForSchemas({{LowerCaseName}}Schemas, SWAGGER_TAGS.{{LowerCaseNameSingle}});