import { pagination } from "#utils";
import {{LowerCaseName}}Schemas from "#modules/{{ModuleName}}/{{ModuleName}}.schemas.js";
import { ResourceNotFoundException } from "#errors";

export default async function {{LowerCaseName}}RouterV1(app) {
  const { {{LowerCaseName}}Repository } = app.diContainer.cradle;

  app.post("/", {
    schema: {{LowerCaseName}}Schemas.create,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.create(req.body);
      return {{LowerCaseNameSingle}};
    },
  });

  app.get("/", {
    schema: {{LowerCaseName}}Schemas.get,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const { skip, limit } = pagination(req);
      const {{LowerCaseName}}List = await {{LowerCaseName}}Repository.findAndCount({
        skip,
        take: limit,
      });
      return {{LowerCaseName}}List;
    },
  });

  app.get("/:id", {
    schema: {{LowerCaseName}}Schemas.getOne,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOne(req.params.id);
      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException("{{UpperCaseName}} not found");
      }
      return {{LowerCaseNameSingle}};
    },
  });

  app.put("/:id", {
    schema: {{LowerCaseName}}Schemas.update,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      let {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOne(req.params.id);
      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException("{{LowerCaseNameSingle}} not found");
      }
      {{LowerCaseNameSingle}} = {{LowerCaseName}}Repository.merge({{LowerCaseNameSingle}}, req.body);
      {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.save({{LowerCaseNameSingle}});
      return {{LowerCaseNameSingle}};
    },
  });

  app.delete("/:id", {
    schema: {{LowerCaseName}}Schemas.delete,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOne(req.params.id);
      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException("{{UpperCaseName}} not found");
      }
      await {{LowerCaseName}}Repository.delete({{LowerCaseNameSingle}});
      return {{LowerCaseNameSingle}};
    },
  });
}