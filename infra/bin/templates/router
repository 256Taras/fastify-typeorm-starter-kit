import { STATUS_SUCCESS } from "#constants";
import { ResourceNotFoundException } from "#errors";
import { createPageOptionsDto, paginateQueryBuilder } from "#utils/common/index.js";
import {{UpperCaseNameSingle}} from "#modules/{{ModuleName}}/{{ModuleNameSingle}}.entity.js";
import {{LowerCaseName}}Schemas from "#modules/{{ModuleName}}/{{ModuleName}}.schemas.js";

export default async function {{LowerCaseName}}RouterV1(app) {
  const { {{LowerCaseName}}Repository } = app.diContainer.cradle;

  app.post("/", {
    schema: {{LowerCaseName}}Schemas.create,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const new{{UpperCaseNameSingle}} = new {{UpperCaseNameSingle}}(req.body);

      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.save(new{{UpperCaseNameSingle}});

      return {{LowerCaseNameSingle}};
    },
  });

  app.get("/", {
    schema: {{LowerCaseName}}Schemas.get,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const pageOptionsDto = createPageOptionsDto(req.query);

      const queryBuilder = {{LowerCaseName}}Repository
        .createQueryBuilder("{{LowerCaseNameSingle}}")
        .orderBy("{{LowerCaseNameSingle}}.createdAt", pageOptionsDto.order);

      return paginateQueryBuilder(queryBuilder, pageOptionsDto);
    },
  });

  app.get("/:id", {
    schema: {{LowerCaseName}}Schemas.getOne,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const { id } = req.params;

      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOneBy({ id });

      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException(`{{UpperCaseNameSingle}} with id:${id} not found`);
      }

      return {{LowerCaseNameSingle}};
    },
  });

  app.put("/:id", {
    schema: {{LowerCaseName}}Schemas.update,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const { id } = req.params;

      let {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOneBy({ id });

      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException(`{{UpperCaseNameSingle}} with id:${id} not found`);
      }

      {{LowerCaseNameSingle}} = {{LowerCaseName}}Repository.merge({{LowerCaseNameSingle}}, req.body);

      {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.save({{LowerCaseNameSingle}});

      return {{LowerCaseNameSingle}};
    },
  });

  app.delete("/:id", {
    schema: {{LowerCaseName}}Schemas.delete,
    preValidation: [app.auth([app.verifyJwt])],

    async handler(req) {
      const { id } = req.params;

      const {{LowerCaseNameSingle}} = await {{LowerCaseName}}Repository.findOneBy({ id });

      if (!{{LowerCaseNameSingle}}) {
        throw new ResourceNotFoundException(`{{UpperCaseNameSingle}} with id:${id} not found`);
      }

      await {{LowerCaseName}}Repository.delete({{LowerCaseNameSingle}});

      return STATUS_SUCCESS;
    },
  });
}